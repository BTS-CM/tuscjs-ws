(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.tusc_ws = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.setRpcConnectionStatusCallback=exports.setAutoReconnect=exports.reset=exports.orders=exports.network=exports.instance=exports.history=exports.db=exports.crypto=exports.close=exports.chainId=void 0;var _ChainWebSocket=_interopRequireDefault(require("./ChainWebSocket")),_GrapheneApi=_interopRequireDefault(require("./GrapheneApi")),_ChainConfig=_interopRequireDefault(require("./ChainConfig"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var autoReconnect=!1,Apis=null,statusCb=null;// by default don't use reconnecting-websocket
const setRpcConnectionStatusCallback=a=>{statusCb=a,Apis&&Apis.setRpcConnectionStatusCallback(a)};exports.setRpcConnectionStatusCallback=setRpcConnectionStatusCallback;const setAutoReconnect=a=>{autoReconnect=a};exports.setAutoReconnect=setAutoReconnect;const reset=function(){let a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:"ws://localhost:8090",b=1<arguments.length?arguments[1]:void 0,c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:4e3,d=3<arguments.length?arguments[3]:void 0,e=4<arguments.length?arguments[4]:void 0;return close().then(()=>(Apis=newApis(),Apis.setRpcConnectionStatusCallback(statusCb),Apis&&b&&Apis.connect(a,c,d,e),Apis))};exports.reset=reset;const instance=function(){let a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"ws://localhost:8090",b=1<arguments.length?arguments[1]:void 0,c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:4e3,d=3<arguments.length?arguments[3]:void 0,e=4<arguments.length?arguments[4]:void 0;return Apis||(Apis=newApis(),Apis.setRpcConnectionStatusCallback(statusCb)),Apis&&b&&Apis.connect(a,c,d),e&&(Apis.closeCb=e),Apis};exports.instance=instance;const chainId=()=>instance().chain_id;exports.chainId=chainId;const close=async()=>{Apis&&(await Apis.close(),Apis=null)};exports.close=close;const get=a=>new Proxy([],{get:(b,c)=>function(){for(var b=arguments.length,d=Array(b),e=0;e<b;e++)d[e]=arguments[e];return Apis[a].exec(c,[...d])}}),db=get("_db");exports.db=db;const network=get("_net");exports.network=network;const history=get("_hist");exports.history=history;const crypto=get("_crypt");exports.crypto=crypto;const orders=get("_orders");exports.orders=orders;const newApis=()=>({connect:function(a,b){let c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{enableCrypto:!1,enableOrders:!1};Apis.url=a;if("undefined"!=typeof window&&window.location&&"https:"===window.location.protocol&&0>a.indexOf("wss://"))throw new Error("Secure domains require wss connection");Apis.ws_rpc&&(Apis.ws_rpc.statusCb=null,Apis.ws_rpc.keepAliveCb=null,Apis.ws_rpc.on_close=null,Apis.ws_rpc.on_reconnect=null),Apis.ws_rpc=new _ChainWebSocket.default(a,Apis.statusCb,b,autoReconnect,a=>{Apis._db&&!a&&Apis._db.exec("get_objects",[["2.1.0"]]).catch(()=>{})}),Apis.init_promise=Apis.ws_rpc.login("","").then(()=>{Apis._db=new _GrapheneApi.default(Apis.ws_rpc,"database"),Apis._net=new _GrapheneApi.default(Apis.ws_rpc,"network_broadcast"),Apis._hist=new _GrapheneApi.default(Apis.ws_rpc,"history"),c.enableOrders&&(Apis._orders=new _GrapheneApi.default(Apis.ws_rpc,"orders")),c.enableCrypto&&(Apis._crypt=new _GrapheneApi.default(Apis.ws_rpc,"crypto"));var a=Apis._db.init().then(()=>Apis._db.exec("get_chain_id",[]).then(a=>(Apis.chain_id=a,_ChainConfig.default.setChainId(a))));Apis.ws_rpc.on_reconnect=()=>{Apis.ws_rpc&&Apis.ws_rpc.login("","").then(()=>{Apis._db.init().then(()=>{Apis.statusCb&&Apis.statusCb("reconnect")}),Apis._net.init(),Apis._hist.init(),c.enableOrders&&Apis._orders.init(),c.enableCrypto&&Apis._crypt.init()})},Apis.ws_rpc.on_close=()=>{Apis.close().then(()=>{Apis.closeCb&&Apis.closeCb()})};let b=[a,Apis._net.init(),Apis._hist.init()];return c.enableOrders&&b.push(Apis._orders.init()),c.enableCrypto&&b.push(Apis._crypt.init()),Promise.all(b)}).catch(b=>(console.error(a,"Failed to initialize with error",b&&b.message),Apis.close().then(()=>{throw b})))},close:async()=>{Apis.ws_rpc&&1===Apis.ws_rpc.ws.readyState&&(await Apis.ws_rpc.close()),Apis.ws_rpc=null},db_api:()=>Apis._db,network_api:()=>Apis._net,history_api:()=>Apis._hist,crypto_api:()=>Apis._crypt,orders_api:()=>Apis._orders,setRpcConnectionStatusCallback:a=>Apis.statusCb=a});
},{"./ChainConfig":2,"./ChainWebSocket":3,"./GrapheneApi":5}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var config={core_asset:"CORE",address_prefix:"GPH",expire_in_secs:15,expire_in_secs_proposal:86400,review_in_secs_committee:86400,networks:{TUSC:{core_asset:"TUSC",address_prefix:"TUSC",chain_id:"eb938e2a955e39e335120d0a99f3b9f8c04a9ed5690275ea5037d6bbadfc6cf3"},TUSC_Test:{core_asset:"TUSC",address_prefix:"TUSC",chain_id:"20ef1e234daf7844e4e8cd03423d5ae80cc0415319a4e5984cf302bf6cc00a1b"}},/** Set a few properties for known chain IDs. */setChainId:a=>{let b=Object.entries(config.networks).find(b=>{let[c,d]=b;if(d.chain_id===a)return config.network_name=c,d.address_prefix&&(config.address_prefix=d.address_prefix),!0});return b?{network_name:b[0],network:b[1]}:void console.log("Unknown chain id (this may be a testnet)",a)},reset:()=>{config.core_asset="CORE",config.address_prefix="GPH",config.expire_in_secs=15,config.expire_in_secs_proposal=86400,console.log("Chain config reset")},setPrefix:function(){let a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:"GPH";return config.address_prefix=a}},_default=config;exports.default=_default;
},{}],3:[function(require,module,exports){
"use strict";var _isomorphicWs=_interopRequireDefault(require("isomorphic-ws"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _defineProperty(a,b,c){return b=_toPropertyKey(b),b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _toPropertyKey(a){var b=_toPrimitive(a,"string");return"symbol"==typeof b?b:b+""}function _toPrimitive(a,b){if("object"!=typeof a||null===a)return a;var c=a[Symbol.toPrimitive];if(c!==void 0){var d=c.call(a,b||"default");if("object"!=typeof d)return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===b?String:Number)(a)}const SOCKET_DEBUG=!1,MAX_SEND_LIFE=5,MAX_RECV_LIFE=2*MAX_SEND_LIFE;class ChainWebSocket{constructor(a,b){let c=2<arguments.length&&arguments[2]!==void 0?arguments[2]:5e3,d=!(3<arguments.length&&arguments[3]!==void 0)||arguments[3],e=4<arguments.length&&arguments[4]!==void 0?arguments[4]:null;_defineProperty(this,"connect",(a,b)=>new Promise((c,d)=>{this.current_reject=d,this.current_resolve=c;try{this.ws=new _isomorphicWs.default(a)}catch(b){// DISCONNECTED
this.ws={readyState:3,close:()=>{}},d(new Error("Invalid url",a," closed"))}this.ws.onopen=this.onOpen,this.ws.onerror=this.onError,this.ws.onmessage=this.onMessage,this.ws.onclose=this.onClose,this.connectionTimeout=setTimeout(()=>{this.current_reject&&(this.current_reject=null,this.close(),d(new Error("Connection attempt timed out after "+b/1e3+"s")))},b)})),_defineProperty(this,"onOpen",()=>{clearTimeout(this.connectionTimeout),this.statusCb&&this.statusCb("open"),this.on_reconnect&&this.on_reconnect(),this.keepalive_timer=setInterval(()=>(this.recv_life--,0==this.recv_life?(console.error(this.url+" connection is dead, terminating ws"),void this.close()):void(this.send_life--,0==this.send_life&&(this.keepAliveCb&&this.keepAliveCb(this.closed),this.send_life=MAX_SEND_LIFE))),5e3),this.current_reject=null,this.current_resolve()}),_defineProperty(this,"onError",a=>{this.keepalive_timer&&(clearInterval(this.keepalive_timer),this.keepalive_timer=void 0),clearTimeout(this.connectionTimeout),this.statusCb&&this.statusCb("error"),this.current_reject&&this.current_reject(a)}),_defineProperty(this,"onMessage",a=>{this.recv_life=MAX_RECV_LIFE,this.listener(JSON.parse(a.data))}),_defineProperty(this,"onClose",()=>{this.closed=!0,this.keepalive_timer&&(clearInterval(this.keepalive_timer),this.keepalive_timer=void 0);for(var a=this.responseCbId+1;a<=this.cbId;a+=1)this.cbs[a].reject(new Error("connection closed"));this.statusCb&&this.statusCb("closed"),this._closeCb&&this._closeCb(),this.on_close&&this.on_close()}),_defineProperty(this,"call",a=>{if(1!==this.ws.readyState)return Promise.reject(new Error("websocket state error:"+this.ws.readyState));let b=a[1];if(SOCKET_DEBUG&&console.log("[ChainWebSocket] >---- call ----->  \"id\":"+(this.cbId+1),JSON.stringify(a)),this.cbId+=1,["set_subscribe_callback","subscribe_to_market","broadcast_transaction_with_callback","set_pending_transaction_callback","set_block_applied_callback"].includes(b)&&(this.subs[this.cbId]={callback:a[2][0]},a[2][0]=this.cbId),["unsubscribe_from_market","unsubscribe_from_accounts"].includes(b)){if("function"!=typeof a[2][0])throw new Error("First parameter of unsub must be the original callback");let b=a[2].splice(0,1)[0];// Find the corresponding subscription
for(let a in this.subs)if(this.subs[a].callback===b){this.unsub[this.cbId]=a;break}}var c={method:"call",params:a};return c.id=this.cbId,this.send_life=MAX_SEND_LIFE,new Promise((a,b)=>{this.cbs[this.cbId]={time:new Date,resolve:a,reject:b},this.ws.send(JSON.stringify(c))})}),_defineProperty(this,"listener",a=>{SOCKET_DEBUG&&console.log("[ChainWebSocket] <---- reply ----<",JSON.stringify(a));let b=!1,c=null;"notice"===a.method&&(b=!0,a.id=a.params[0]),b?c=this.subs[a.id].callback:(c=this.cbs[a.id],this.responseCbId=a.id),c&&!b?(a.error?c.reject(a.error):c.resolve(a.result),delete this.cbs[a.id],this.unsub[a.id]&&(delete this.subs[this.unsub[a.id]],delete this.unsub[a.id])):c&&b?c(a.params[1]):console.log("Warning: unknown websocket response: ",a)}),_defineProperty(this,"login",(a,b)=>this.connect_promise.then(()=>this.call([1,"login",[a,b]]))),_defineProperty(this,"close",()=>new Promise(a=>(clearInterval(this.keepalive_timer),this.keepalive_timer=void 0,this._closeCb=()=>{a(),this._closeCb=null},this.ws?void(this.ws.terminate?this.ws.terminate():this.ws.close(),3===this.ws.readyState&&a()):(console.log("Websocket already cleared",this),a())))),this.url=a,this.statusCb=b,this.current_reject=null,this.on_reconnect=null,this.closed=!1,this.send_life=MAX_SEND_LIFE,this.recv_life=MAX_RECV_LIFE,this.keepAliveCb=e,this.cbId=0,this.responseCbId=0,this.cbs={},this.subs={},this.unsub={},this.connect_promise=this.connect(a,c)}}var _default=ChainWebSocket;exports.default=_default;
},{"isomorphic-ws":7}],4:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var Apis=_interopRequireWildcard(require("./ApiInstances")),_ChainWebSocket=_interopRequireDefault(require("./ChainWebSocket"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _getRequireWildcardCache(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(_getRequireWildcardCache=function(a){return a?c:b})(a)}function _interopRequireWildcard(a,b){if(!b&&a&&a.__esModule)return a;if(null===a||"object"!=typeof a&&"function"!=typeof a)return{default:a};var c=_getRequireWildcardCache(b);if(c&&c.has(a))return c.get(a);var d={},e=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var f in a)if("default"!=f&&Object.prototype.hasOwnProperty.call(a,f)){var g=e?Object.getOwnPropertyDescriptor(a,f):null;g&&(g.get||g.set)?Object.defineProperty(d,f,g):d[f]=a[f]}return d.default=a,c&&c.set(a,d),d}function _defineProperty(a,b,c){return b=_toPropertyKey(b),b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _toPropertyKey(a){var b=_toPrimitive(a,"string");return"symbol"==typeof b?b:b+""}function _toPrimitive(a,b){if("object"!=typeof a||null===a)return a;var c=a[Symbol.toPrimitive];if(c!==void 0){var d=c.call(a,b||"default");if("object"!=typeof d)return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===b?String:Number)(a)}class Manager{constructor(a){var b=this;let{url:c,urls:d,autoFallback:e,closeCb:f,optionalApis:g,urlChangeCallback:h}=a;_defineProperty(this,"setCloseCb",a=>{this.closeCb=a}),_defineProperty(this,"logFailure",(a,b,c)=>{let d=c&&c.message?c.message:"";console.error(a,"Failed to connect to "+b+(d?" Error: "+JSON.stringify(d):""))}),_defineProperty(this,"_onClose",()=>{this.isConnected=!1,this.closeCb&&(this.closeCb(),this.setCloseCb(null)),this.autoFallback&&this.connectWithFallback()}),_defineProperty(this,"connect",async function(){let a=!(0<arguments.length&&arguments[0]!==void 0)||arguments[0],c=1<arguments.length&&arguments[1]!==void 0?arguments[1]:b.url;try{let d=await Apis.instance(c,a,void 0,b.optionalApis,b._onClose).init_promise;return b.url=c,b.isConnected=!0,d}catch(a){throw await Apis.close(),a}}),_defineProperty(this,"connectWithFallback",async function(){let a=!(0<arguments.length&&arguments[0]!==void 0)||arguments[0],c=1<arguments.length&&arguments[1]!==void 0?arguments[1]:b.url,d=2<arguments.length&&arguments[2]!==void 0?arguments[2]:0,e=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null,f=4<arguments.length&&arguments[4]!==void 0?arguments[4]:null;if(d>b.urls.length)return f(new Error("Tried "+d+" connections, none of which worked: "+JSON.stringify(b.urls.concat(b.url))));try{return await b.connect(a,c)}catch(c){return b.urlChangeCallback&&b.urlChangeCallback(b.urls[d]),b.connectWithFallback(a,b.urls[d],d+1,e,f)}}),_defineProperty(this,"checkConnections",async function(){let a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:"",c=1<arguments.length&&arguments[1]!==void 0?arguments[1]:"",d=2<arguments.length?arguments[2]:void 0,e=3<arguments.length?arguments[3]:void 0,f={},g=b.urls.concat(b.url),h=g.map(async d=>{/* Use default timeout and no reconnecting-websocket */let e=new _ChainWebSocket.default(d,()=>{},void 0,!1);f[d]=new Date().getTime();try{await e.login(a,c);let b={[d]:new Date().getTime()-f[d]};return await e.close(),b}catch(a){return d===b.url?b.url=b.urls[0]:b.urls=b.urls.filter(b=>b!==d),void(await e.close())}});try{let a=await Promise.all(h),b=a.filter(b=>!!b).sort((c,a)=>Object.values(c)[0]-Object.values(a)[0]).reduce((b,c)=>{let a=Object.keys(c)[0];return b[a]=c[a],b},{});return console.log(`Checked ${a.length} connections, ${a.length-Object.keys(b).length} failed`),b}catch(f){return b.checkConnections(a,c,d,e)}}),this.url=c,this.urls=d.filter(b=>b!==c),this.autoFallback=e,this.closeCb=f,this.optionalApis=g||{},this.isConnected=!1,this.urlChangeCallback=h}static close(){return Apis.close()}}var _default=Manager;exports.default=_default;
},{"./ApiInstances":1,"./ChainWebSocket":3}],5:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;class GrapheneApi{constructor(a,b){this.ws_rpc=a,this.api_name=b}init(){var a=this;return this.ws_rpc.call([1,this.api_name,[]]).then(b=>(a.api_id=b,a))}exec(a,b){return this.ws_rpc.call([this.api_id,a,b]).catch(a=>{// console.log("!!! GrapheneApi error: ", method, params, error, JSON.stringify(error));
throw a})}}var _default=GrapheneApi;exports.default=_default;
},{}],6:[function(require,module,exports){
"use strict";var Apis=_interopRequireWildcard(require("./ApiInstances"));Object.defineProperty(exports,"__esModule",{value:!0}),exports.Apis=void 0,Object.defineProperty(exports,"ChainConfig",{enumerable:!0,get:function(){return _ChainConfig.default}}),Object.defineProperty(exports,"Manager",{enumerable:!0,get:function(){return _ConnectionManager.default}});exports.Apis=Apis;var _ConnectionManager=_interopRequireDefault(require("./ConnectionManager")),_ChainConfig=_interopRequireDefault(require("./ChainConfig"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _getRequireWildcardCache(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(_getRequireWildcardCache=function(a){return a?c:b})(a)}function _interopRequireWildcard(a,b){if(!b&&a&&a.__esModule)return a;if(null===a||"object"!=typeof a&&"function"!=typeof a)return{default:a};var c=_getRequireWildcardCache(b);if(c&&c.has(a))return c.get(a);var d={},e=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var f in a)if("default"!=f&&Object.prototype.hasOwnProperty.call(a,f)){var g=e?Object.getOwnPropertyDescriptor(a,f):null;g&&(g.get||g.set)?Object.defineProperty(d,f,g):d[f]=a[f]}return d.default=a,c&&c.set(a,d),d}
},{"./ApiInstances":1,"./ChainConfig":2,"./ConnectionManager":4}],7:[function(require,module,exports){
(function (global){(function (){
// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js

var ws = null

if (typeof WebSocket !== 'undefined') {
  ws = WebSocket
} else if (typeof MozWebSocket !== 'undefined') {
  ws = MozWebSocket
} else if (typeof global !== 'undefined') {
  ws = global.WebSocket || global.MozWebSocket
} else if (typeof window !== 'undefined') {
  ws = window.WebSocket || window.MozWebSocket
} else if (typeof self !== 'undefined') {
  ws = self.WebSocket || self.MozWebSocket
}

module.exports = ws

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[6])(6)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
